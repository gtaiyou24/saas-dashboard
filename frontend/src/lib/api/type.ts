/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ヘルスチェック
         * @description リクエスト可能な状態かを確認できます。
         */
        get: operations["\u30D8\u30EB\u30B9\u30C1\u30A7\u30C3\u30AF_health_check_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ユーザー登録
         * @description ユーザー登録
         */
        post: operations["\u30E6\u30FC\u30B6\u30FC\u767B\u9332_users_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/unregister": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * ユーザー削除
         * @description ユーザー削除
         */
        delete: operations["\u30E6\u30FC\u30B6\u30FC\u524A\u9664_users_unregister_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/verify-email/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * メアド認証
         * @description メールアドレス認証
         */
        post: operations["\u30E1\u30A2\u30C9\u8A8D\u8A3C_users_verify_email__token__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ErrorJson */
        ErrorJson: {
            /**
             * Type
             * @enum {string}
             */
            type: "COMMON_1000" | "COMMON_2001" | "COMMON_2002" | "COMMON_2003" | "VALID_TOKEN_DOES_NOT_EXISTS" | "USER_DOES_NOT_FOUND" | "USER_IS_NOT_VERIFIED";
            /** Title */
            title: string;
            status: components["schemas"]["HTTPStatus"];
            /** Instance */
            instance: string;
        };
        /**
         * HTTPStatus
         * @description HTTP status codes and reason phrases
         *
         *     Status codes from the following RFCs are all observed:
         *
         *         * RFC 7231: Hypertext Transfer Protocol (HTTP/1.1), obsoletes 2616
         *         * RFC 6585: Additional HTTP Status Codes
         *         * RFC 3229: Delta encoding in HTTP
         *         * RFC 4918: HTTP Extensions for WebDAV, obsoletes 2518
         *         * RFC 5842: Binding Extensions to WebDAV
         *         * RFC 7238: Permanent Redirect
         *         * RFC 2295: Transparent Content Negotiation in HTTP
         *         * RFC 2774: An HTTP Extension Framework
         *         * RFC 7725: An HTTP Status Code to Report Legal Obstacles
         *         * RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2)
         *         * RFC 2324: Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)
         *         * RFC 8297: An HTTP Status Code for Indicating Hints
         *         * RFC 8470: Using Early Data in HTTP
         * @enum {integer}
         */
        HTTPStatus: 100 | 101 | 102 | 103 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 226 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 421 | 422 | 423 | 424 | 425 | 426 | 428 | 429 | 431 | 451 | 500 | 501 | 502 | 503 | 504 | 505 | 506 | 507 | 508 | 510 | 511;
        /** RegisterTenantRequest */
        RegisterTenantRequest: {
            /** ユーザー名 */
            username: string;
            /** メールアドレス */
            email_address: string;
            /** パスワード */
            password: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "\u30D8\u30EB\u30B9\u30C1\u30A7\u30C3\u30AF_health_check_get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorJson"];
                };
            };
        };
    };
    "\u30E6\u30FC\u30B6\u30FC\u767B\u9332_users_register_post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterTenantRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorJson"];
                };
            };
        };
    };
    "\u30E6\u30FC\u30B6\u30FC\u524A\u9664_users_unregister_delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorJson"];
                };
            };
        };
    };
    "\u30E1\u30A2\u30C9\u8A8D\u8A3C_users_verify_email__token__post": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorJson"];
                };
            };
        };
    };
}
